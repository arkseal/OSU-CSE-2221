import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Aarush Katta
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel")
                : "" + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        String title = "Empty Title", link = "", desc = "No Description";

        // Get title
        String s = channel.child(getChildElement(channel, "title")).child(0).label();
        if (!s.isEmpty()) {
            title = s;
        }

        // get link
        link = channel.child(getChildElement(channel, "link")).child(0).label();

        // get description
        s = channel.child(getChildElement(channel, "description")).child(0).label();
        if (!s.isEmpty()) {
            desc = s;
        }

        out.println("<html><head><title>" + title + "</title></head><body><h1><a href=\""
                + link + "\">" + title + "</a></h1><p>" + desc
                + "</p><table border=\"1\"><tr><th>Date</th>"
                + "<th>Source</th><th>News</th></tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table></body></html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        // loop through all children
        int a = -1, i = 0;
        while (i < xml.numberOfChildren()) {
            if (xml.child(i).label().equals(tag)) {
                // set index to a and force exit the while loop
                a = i;
                i = xml.numberOfChildren();
            }
            i++;
        }
        return a;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item")
                : "" + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        String pubDate = "No date available", source = "No source available",
                sourceLink = "", title = "", description = "No title available",
                link = "";

        // get publication date
        int i = 0;
        i = getChildElement(item, "pubDate");
        if (i != -1) {
            // check if publication date has a text node
            if (item.child(i).numberOfChildren() > 0) {
                String p = item.child(i).child(0).label();
                if (!p.isEmpty()) {
                    pubDate = p;
                }
            }
        }

        // get source and source link
        i = getChildElement(item, "source");
        if (i != -1) {
            // check if the source has a text node
            if (item.child(i).numberOfChildren() > 0) {
                source = item.child(i).child(0).label();
                if (item.child(i).hasAttribute("url")) {
                    sourceLink = item.child(i).attributeValue("url");
                }
            }
        }

        // get title
        i = getChildElement(item, "title");
        if (i != -1) {
            // check if the title has a text node
            if (item.child(i).numberOfChildren() > 0) {
                title = item.child(i).child(0).label();
            }
        }

        // get description
        i = getChildElement(item, "description");
        if (i != -1) {
            // check if the description has a text node
            if (item.child(i).numberOfChildren() > 0) {
                String d = item.child(i).child(0).label();
                if (!d.isEmpty()) {
                    description = item.child(i).child(0).label();
                }
            }
        }

        // get link
        i = getChildElement(item, "link");
        if (i != -1) {
            link = item.child(i).child(0).label();
        }

        // if there is no title, set it to description
        if (title.isEmpty()) {
            title = description;
        }

        // add source link if it exists
        if (!sourceLink.isEmpty()) {
            source = "<a href=\"" + sourceLink + "\">" + source + "</a>";
        }

        // add link to title if it exists
        if (!link.isEmpty()) {
            title = "<a href=\"" + link + "\">" + title + "</a>";
        }

        out.println("<tr><td>" + pubDate + "</td><td>" + source + "</td><td>" + title
                + "</td></tr>");
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
        // open html file
        SimpleWriter fout = new SimpleWriter1L(file);

        // make xml
        XMLTree xml = new XMLTree1(url);

        // assert xml file is proper rss
        assert xml.label().equals("rss") : "Root is not rss tag";
        assert xml.hasAttribute("version") && xml.attributeValue("version").equals("2.0")
                : "RSS version is not 2.0";

        // set channel to root
        int c = getChildElement(xml, "channel");
        xml = xml.child(c);

        // print header
        outputHeader(xml, fout);

        // loop over every child, check if it's item and process the item
        for (int i = 0; i < xml.numberOfChildren(); i++) {
            XMLTree t = xml.child(i);
            if (t.label().equals("item")) {
                processItem(t, fout);
            }
        }

        // print footer
        outputFooter(fout);

        // close file
        fout.close();
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        // get xml link
        out.print("What is the link of the xml?: ");
        String link = in.nextLine();

        // open xml
        XMLTree xml = new XMLTree1(link);

        // get title
        String title = xml.attributeValue("title");

        // process every feed in the xml
        String[] names = new String[xml.numberOfChildren()];
        String[] links = new String[xml.numberOfChildren()];
        for (int i = 0; i < xml.numberOfChildren(); i++) {
            XMLTree child = xml.child(i);
            String url = child.attributeValue("url");
            String name = child.attributeValue("name");
            String file = child.attributeValue("file");

            processFeed(url, file, out);
            names[i] = name;
            links[i] = file;
        }

        // open index.html file
        SimpleWriter fout = new SimpleWriter1L("index.html");

        // write to html
        fout.println("<html><head><title>");
        fout.println(title);
        fout.print("</title></head><body><h1>");
        fout.print(title);
        fout.println("</h1><ul>");
        for (int i = 0; i < names.length; i++) {
            fout.println("<li><a href=\"" + links[i] + "\">" + names[i] + "</a></li>");
        }
        fout.println("</ul></body></html>");

        // close html file
        fout.close();
        out.println("complete");

        // close input and output
        in.close();
        out.close();
    }

}
